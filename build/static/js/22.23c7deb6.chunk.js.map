{"version":3,"sources":["views/statistiques/index.js"],"names":["Statistiques","useState","totalAccident","setTotalAccident","totalAgents","setTotalAgents","totalDeces","totalUsers","setTotalUsers","GET_TOTAL_NUMBERS_ACCIDENT","a","API_BASE_URL","get","then","res","allNumbers","JSON","stringify","data","total_accident","console","log","GET_TOTAL_NUMBERS_USERS","allUsers","total_user","getTotalAgent","total","useEffect","e","pie","labels","datasets","backgroundColor","hoverBackgroundColor","className","src","type"],"mappings":"yMAuLeA,UAjLM,WAEnB,MAA0CC,mBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KACA,GADA,KACoCL,mBAAS,IAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KAGMC,EAA0B,uCAAG,sBAAAC,EAAA,+EAExBC,IAAaC,IAAI,2BAA2BC,MAAM,SAAAC,GACvD,IAAIC,EAAaC,KAAKC,UAAUH,EAAII,KAAKA,KAAK,GAAGC,gBACjDC,QAAQC,IAAI,YAAYN,GACxBZ,EAAiBY,MALY,sDAQ/BK,QAAQC,IAAR,MAR+B,wDAAH,qDAY1BC,EAAuB,uCAAG,sBAAAZ,EAAA,+EAErBC,IAAaC,IAAI,oBAAoBC,MAAM,SAAAC,GAChD,IAAIS,EAAWP,KAAKC,UAAUH,EAAII,KAAKA,KAAK,GAAGM,YAC/CJ,QAAQC,IAAI,YAAYE,GACxBf,EAAce,MALY,sDAQ5BH,QAAQC,IAAR,MAR4B,wDAAH,qDAYvBI,EAAa,uCAAG,sBAAAf,EAAA,+EAEXC,IAAaC,IAAI,wBAAwBC,MAAM,SAAAC,GACpD,IAAMI,EAAOF,KAAKC,UAAUH,EAAII,KAAKA,KAAK,GAAGQ,OAC7CN,QAAQC,IAAI,YAAYH,GACxBb,EAAea,MALC,sDAQlBE,QAAQC,IAAR,MARkB,wDAAH,qDAYnBM,qBAAU,WACR,IACElB,IACAgB,IACAH,IACD,MAAOM,GACNR,QAAQC,IAAIO,MAEb,IAWU,GAAD,OAAI1B,GAAJ,UAAwBK,GAAxB,UAAyCH,GAAzC,UAA2DE,GARvE,IAsBMuB,EAAM,CACVC,OAAQ,CACN,YACA,wBACA,kBACA,SAEFC,SAAU,CACR,CACEb,KAAM,CAAC,GAAD,OAAIhB,GAAJ,UAAwBK,GAAxB,UAAyCH,GAAzC,UAA2DE,IACjE0B,gBAAiB,CACf,UACA,UACA,UACA,WAEFC,qBAAsB,CACpB,UACA,UACA,UACA,cAIR,OACE,cAAC,IAAD,UAEsB,IAAlB/B,EAEE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMgC,UAAU,eAAhB,SAKE,gCACE,cAAC,IAAD,CACEC,IAAK,sBACLD,UAAU,cAEZ,oBAAIA,UAAU,6BAAd,kDAKN,eAAC,IAAD,WACE,cAAC,IAAD,2BAGA,cAAC,IAAD,UACE,cAAC,IAAD,CAAQE,KAAK,MAAML,SAAUF,EAAIE,SAAUD,OAAQD,EAAIC","file":"static/js/22.23c7deb6.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {CCard, CBadge, CCardBody, CCardGroup, CCardHeader, CCol, CContainer, CRow, CImg} from \"@coreui/react\";\r\nimport {CChart, CChartRadar} from \"@coreui/react-chartjs\";\r\nimport {API_BASE_URL} from \"../../models\";\r\n\r\n\r\nconst Statistiques = () => {\r\n\r\n  const [totalAccident, setTotalAccident] = useState(0);\r\n  const [totalAgents, setTotalAgents] = useState(0);\r\n  const [totalDeces, setTotalDeces] = useState(0);\r\n  const [totalUsers, setTotalUsers] = useState(0);\r\n\r\n  //fonction qui permet compter le nombre d'accident\r\n  const GET_TOTAL_NUMBERS_ACCIDENT = async () => {\r\n    try {\r\n      await  API_BASE_URL.get(\"accidents/all-accidents\").then( res => {\r\n        let allNumbers = JSON.stringify(res.data.data[0].total_accident)\r\n        console.log(\"dataaa : \"+allNumbers)\r\n        setTotalAccident(allNumbers)\r\n      })\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  //fonction qui permet compter le nombre d'utilisateur inscrit\r\n  const GET_TOTAL_NUMBERS_USERS = async () => {\r\n    try {\r\n      await  API_BASE_URL.get(\"users/total-user\").then( res => {\r\n        let allUsers = JSON.stringify(res.data.data[0].total_user)\r\n        console.log(\"dataaa : \"+allUsers)\r\n        setTotalUsers(allUsers)\r\n      })\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  //fonction to get count agent\r\n  const getTotalAgent = async () => {\r\n    try {\r\n      await  API_BASE_URL.get(\"agents/all/all-agent\").then( res => {\r\n        const data = JSON.stringify(res.data.data[0].total)\r\n        console.log(\"dataaa : \"+data)\r\n        setTotalAgents(data)\r\n      })\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    try {\r\n      GET_TOTAL_NUMBERS_ACCIDENT();\r\n      getTotalAgent();\r\n      GET_TOTAL_NUMBERS_USERS();\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }, []);\r\n\r\n\r\n  const radar = {\r\n    labels: [\r\n      'REGION',\r\n      'QUARTIER',\r\n      'VILLE',\r\n    ],\r\n    datasets: [\r\n      {\r\n        data: [`${totalAccident}`, `${totalUsers}`, `${totalAgents}`, `${totalDeces}`],\r\n        backgroundColor: [\r\n          '#ff8b0b',\r\n          '#70b40e',\r\n          '#36A2EB',\r\n        ],\r\n        hoverBackgroundColor: [\r\n          '#ff8b0b',\r\n          '#70b40e',\r\n          '#36A2EB',\r\n        ],\r\n      }],\r\n  };\r\n\r\n  const pie = {\r\n    labels: [\r\n      'ACCDIENTS',\r\n      'UTILISATEURS INSCRITS',\r\n      'AGENTS INSCRITS',\r\n      'DECES',\r\n    ],\r\n    datasets: [\r\n      {\r\n        data: [`${totalAccident}`, `${totalUsers}`, `${totalAgents}`, `${totalDeces}`],\r\n        backgroundColor: [\r\n          '#ff8b0b',\r\n          '#70b40e',\r\n          '#36A2EB',\r\n          '#fa0404',\r\n        ],\r\n        hoverBackgroundColor: [\r\n          '#ff8b0b',\r\n          '#70b40e',\r\n          '#36A2EB',\r\n          '#fa0404',\r\n        ],\r\n      }],\r\n  };\r\n  return (\r\n    <CContainer>\r\n      {\r\n        totalAccident === 0\r\n          ?\r\n          <CRow>\r\n            <CCol className=\"text-center \">\r\n              {/* <i style={{fontSize: 180, opacity: 0.5}} className=\"fa fa-bar-chart\"></i>\r\n              <h4 className=\" text-uppercase text-center\">\r\n                Statistiques non disponible\r\n              </h4>*/}\r\n              <div>\r\n                <CImg\r\n                  src={'avatars/datta-1.png'}\r\n                  className=\"img-fluid\"\r\n                />\r\n                <h4 className=\"text-uppercase text-center\">Donn√©es indisponibles  ...</h4>\r\n              </div>\r\n            </CCol>\r\n          </CRow>\r\n          :\r\n          <CCard>\r\n            <CCardHeader>\r\n              STATISTIQUES\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CChart type=\"pie\" datasets={pie.datasets} labels={pie.labels} />\r\n            </CCardBody>\r\n          </CCard>\r\n      }\r\n      {/* <CCard>\r\n        <CCardHeader>\r\n          Radar Stats\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartRadar\r\n            datasets={[\r\n              {\r\n                label: 'ACCIDENTS',\r\n                backgroundColor: 'rgba(179,181,198,0.2)',\r\n                borderColor: 'rgba(179,181,198,1)',\r\n                pointBackgroundColor: 'rgba(179,181,198,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgba(179,181,198,1)',\r\n                tooltipLabelColor: 'rgba(179,181,198,1)',\r\n                data: [`${totalAccident}`, 59, 90]\r\n              },\r\n              {\r\n                label: 'INTERVENTIONS',\r\n                backgroundColor: 'rgba(255,99,132,0.2)',\r\n                borderColor: 'rgba(255,99,132,1)',\r\n                pointBackgroundColor: 'rgba(255,99,132,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n                tooltipLabelColor: 'rgba(255,99,132,1)',\r\n                data: [28, 48, 40]\r\n              }\r\n            ]}\r\n            options={{\r\n              aspectRatio: 1.5,\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n            labels={[\r\n              'Region', 'Ville', 'Quartien'\r\n            ]}\r\n          />\r\n\r\n        </CCardBody>\r\n      </CCard>*/}\r\n    </CContainer>\r\n  );\r\n}\r\nexport default Statistiques\r\n\r\n"],"sourceRoot":""}