{"version":3,"sources":["views/dashboard/Dashboard.js","views/statistiques/index.js"],"names":["SOCKET","on","data","console","log","Dashboard","useState","totalAgents","setTotalAgents","totalAccident","setTotalAccident","totalUsers","setTotalUsers","totalDeces","getTotalAgent","a","API_BASE_URL","get","then","res","JSON","stringify","total","GET_ALL_NUMBERS_ACCIDENT","allNumbers","total_accident","GET_TOTAL_NUMBERS_USERS","allUsers","total_user","useEffect","className","header","text","color","value","inverse","src","height","width","Statistiques","GET_TOTAL_NUMBERS_ACCIDENT","e","pie","labels","datasets","backgroundColor","hoverBackgroundColor","type"],"mappings":"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","file":"static/js/7.6d5f0a62.chunk.js","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\r\nimport {\r\n  CBadge, CButton, CCallout, CCard,\r\n  CCardBody,\r\n  CCardFooter, CCardGroup, CCardHeader,\r\n  CCol, CCollapse, CDataTable, CImg,\r\n  CLink, CModal, CModalBody, CModalFooter, CModalHeader,\r\n  CProgress,\r\n  CRow,\r\n  CWidgetIcon,\r\n  CWidgetProgress,\r\n  CWidgetProgressIcon\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport {CChart} from \"@coreui/react-chartjs\";\r\nimport {AuthContext} from \"../../navigation/AuthProvider\";\r\nimport {API_BASE_URL, SOCKET} from \"../../models\";\r\nimport Statistiques from \"../statistiques\";\r\n\r\n//socket config\r\n\r\n\r\n//obtentiton des donnes du socket\r\nSOCKET.on('sendData', function (data) {\r\n  console.log(\"data of socket \", data);\r\n});\r\n\r\nconst Dashboard = () => {\r\n\r\n  const [modal, setModal] = useState(false);\r\n  const [details, setDetails] = useState([])\r\n  // const [items, setItems] = useState(usersData)\r\n  const [totalAgents, setTotalAgents] = useState(0);\r\n  const [totalAccident, setTotalAccident] = useState(0);\r\n  const [totalUsers, setTotalUsers] = useState(0);\r\n  const [totalDeces, setTotalDeces] = useState(0);\r\n  const [totalGueris, setTotalGueris] = useState(0);\r\n\r\n\r\n  //fonction to get count agent\r\n    const getTotalAgent = async () => {\r\n      try {\r\n        await  API_BASE_URL.get(\"agents/all/all-agent\").then( res => {\r\n          const data = JSON.stringify(res.data.data[0].total)\r\n          console.log(\"dataaa : \"+data)\r\n          setTotalAgents(data)\r\n        })\r\n      }catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n  //fonction qui permet compter le nombre d'accident\r\n  const GET_ALL_NUMBERS_ACCIDENT = async () => {\r\n    try {\r\n      await  API_BASE_URL.get(\"accidents/all-accidents\").then( res => {\r\n        console.log(\" data dashboard\", res.data)\r\n        const allNumbers = JSON.stringify(res.data.data[0].total_accident)\r\n        console.log(\"dataaa : \"+allNumbers)\r\n        setTotalAccident(allNumbers)\r\n      })\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  //fonction qui permet compter le nombre d'utilisateur inscrit\r\n  const GET_TOTAL_NUMBERS_USERS = async () => {\r\n    try {\r\n      await  API_BASE_URL.get(\"users/total-user\").then( res => {\r\n        let allUsers = JSON.stringify(res.data.data[0].total_user)\r\n        console.log(\"dataaa : \"+allUsers)\r\n        setTotalUsers(allUsers)\r\n      })\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getTotalAgent();\r\n    GET_ALL_NUMBERS_ACCIDENT();\r\n    GET_TOTAL_NUMBERS_USERS();\r\n  }, [])\r\n  console.log(\" Total des agents :\"+totalAgents)\r\n  console.log(\" Total des accidents :\"+totalAccident)\r\n\r\n\r\n  return (\r\n    <>\r\n      {/*Dashboard */}\r\n      <CRow>\r\n       <CCol>\r\n         <CCardGroup className=\"mb-4\">\r\n           <CWidgetProgressIcon\r\n             header={`${totalAgents}`}\r\n             text=\"NOMBRES D'AGENTS\"\r\n             color=\"gradient-info\"\r\n             value={`${totalAgents}`}\r\n             inverse\r\n           >\r\n             <CImg\r\n               src={'avatars/users.png'}\r\n               height={80}\r\n               width={80}\r\n               className=\"bg-gradient rounded-pill border-end p-2\"\r\n             />\r\n           </CWidgetProgressIcon>\r\n           <CWidgetProgressIcon\r\n             header={`${totalAccident}`}\r\n             text=\"NOMBRES D'ACCIDENTS\"\r\n             color=\"gradient-warning\"\r\n             value={`${totalAccident}`}\r\n             inverse\r\n           >\r\n             <CImg\r\n               src={'avatars/accident.png'}\r\n               height={80}\r\n               width={80}\r\n               className=\"bg-gradient rounded-pill border-end p-2\"\r\n             />\r\n           </CWidgetProgressIcon>\r\n           <CWidgetProgressIcon\r\n             header={`${totalUsers}`}\r\n             text=\"UTILISATEURS INSCRITS\"\r\n             color=\"gradient-success\"\r\n             inverse\r\n             value={`${totalUsers}`}\r\n           >\r\n             <CImg\r\n               src={'avatars/users.png'}\r\n               height={80}\r\n               width={80}\r\n               className=\"bg-gradient rounded-pill border-end p-2\"\r\n             />\r\n           </CWidgetProgressIcon>\r\n\r\n           <CWidgetProgressIcon\r\n             header={`${totalDeces}`}\r\n             text=\"NOMBRE DE DECES\"\r\n             color=\"gradient-danger\"\r\n             value={`${totalDeces}`}\r\n             inverse\r\n           >\r\n             <CImg\r\n               src={'avatars/deadly.png'}\r\n               height={80}\r\n               width={80}\r\n               className=\"bg-gradient rounded-pill border-end p-2\"\r\n             />\r\n           </CWidgetProgressIcon>\r\n         </CCardGroup>\r\n       </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol>\r\n          <Statistiques />\r\n        </CCol>\r\n      </CRow>\r\n\r\n      {/*Zones de la liste des agents*/}\r\n      {/*<CRow>\r\n        <CCol>\r\n          <CCard>\r\n            <CCardHeader >\r\n             <h2> <i className=\" fa fa-list-ul\"></i> LISTES DES AGENTS</h2>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CDataTable\r\n                items={usersData}\r\n                fields={fields}\r\n                tableFilter\r\n                itemsPerPageSelect\r\n                itemsPerPage={5}\r\n                hover\r\n                sorter\r\n                pagination\r\n                size=\"sm\"\r\n                itemsPerPage={10}\r\n                pagination\r\n                scopedSlots = {{\r\n                  'status':\r\n                    (item)=>(\r\n                      <td>\r\n                        <CBadge color={getBadge(item.status)}>\r\n                          {item.status}\r\n                        </CBadge>\r\n                      </td>\r\n                    ),\r\n                  'show_details':\r\n                    (item, index)=>{\r\n                      return (\r\n                        <td className=\"py-2\">\r\n                          <CButton\r\n                            color=\"primary\"\r\n                            variant=\"outline\"\r\n                            shape=\"square\"\r\n                            size=\"sm\"\r\n                            onClick={()=>{toggleDetails(index)}}\r\n                          >\r\n                            {details.includes(index)\r\n                              ?\r\n                              <div style={{ padding: 5, display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignContent: 'space-between'}}> <i className=\"fa fa-eye-slash\" > </i> Cacher</div>\r\n                              :\r\n                              <div style={{ padding: 5, display: 'flex',flexDirection: 'row', justifyContent: 'space-between', alignContent: 'space-between'}}> <i className=\"fa fa-eye\" > </i> Visualiser </div>\r\n                            }\r\n                          </CButton>\r\n                        </td>\r\n                      )\r\n                    },\r\n                  'details':\r\n                    (item, index)=>{\r\n                      return (\r\n                        <CCollapse show={details.includes(index)}>\r\n                          <CCardBody>\r\n                            <h4>\r\n                              {item.name}\r\n                            </h4>\r\n                            <p className=\"text-muted\">User since: {item.registered}</p>\r\n                            <CButton size=\"sm\" color=\"info\" >\r\n                              Voir plus details sur l'agent\r\n                            </CButton>\r\n\r\n                            <CButton size=\"sm\" color=\"danger\" className=\"ml-1\">\r\n                              Retirer de l'agent de l'entreprise\r\n                            </CButton>\r\n                          </CCardBody>\r\n                        </CCollapse>\r\n                      )\r\n                    }\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>*/}\r\n      {/*<CRow>\r\n        <CCol>\r\n          <CCard>\r\n            <CCardHeader>\r\n              <h2> <i className=\"fa fa-chart-line\"></i> STATISTIQUES</h2>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CChart type=\"radar\" datasets={radar.datasets} labels={radar.labels}/>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>*/}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","import React, {useEffect, useState} from 'react'\r\nimport {CCard, CBadge, CCardBody, CCardGroup, CCardHeader, CCol, CContainer, CRow, CImg} from \"@coreui/react\";\r\nimport {CChart, CChartRadar} from \"@coreui/react-chartjs\";\r\nimport {API_BASE_URL} from \"../../models\";\r\n\r\n\r\nconst Statistiques = () => {\r\n\r\n  const [totalAccident, setTotalAccident] = useState(0);\r\n  const [totalAgents, setTotalAgents] = useState(0);\r\n  const [totalDeces, setTotalDeces] = useState(0);\r\n  const [totalUsers, setTotalUsers] = useState(0);\r\n\r\n  //fonction qui permet compter le nombre d'accident\r\n  const GET_TOTAL_NUMBERS_ACCIDENT = async () => {\r\n    try {\r\n      await  API_BASE_URL.get(\"accidents/all-accidents\").then( res => {\r\n        let allNumbers = JSON.stringify(res.data.data[0].total_accident)\r\n        console.log(\"dataaa : \"+allNumbers)\r\n        setTotalAccident(allNumbers)\r\n      })\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  //fonction qui permet compter le nombre d'utilisateur inscrit\r\n  const GET_TOTAL_NUMBERS_USERS = async () => {\r\n    try {\r\n      await  API_BASE_URL.get(\"users/total-user\").then( res => {\r\n        let allUsers = JSON.stringify(res.data.data[0].total_user)\r\n        console.log(\"dataaa : \"+allUsers)\r\n        setTotalUsers(allUsers)\r\n      })\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  //fonction to get count agent\r\n  const getTotalAgent = async () => {\r\n    try {\r\n      await  API_BASE_URL.get(\"agents/all/all-agent\").then( res => {\r\n        const data = JSON.stringify(res.data.data[0].total)\r\n        console.log(\"dataaa : \"+data)\r\n        setTotalAgents(data)\r\n      })\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    try {\r\n      GET_TOTAL_NUMBERS_ACCIDENT();\r\n      getTotalAgent();\r\n      GET_TOTAL_NUMBERS_USERS();\r\n    }catch (e) {\r\n      console.log(e)\r\n    }\r\n  }, []);\r\n\r\n\r\n  const radar = {\r\n    labels: [\r\n      'REGION',\r\n      'QUARTIER',\r\n      'VILLE',\r\n    ],\r\n    datasets: [\r\n      {\r\n        data: [`${totalAccident}`, `${totalUsers}`, `${totalAgents}`, `${totalDeces}`],\r\n        backgroundColor: [\r\n          '#ff8b0b',\r\n          '#70b40e',\r\n          '#36A2EB',\r\n        ],\r\n        hoverBackgroundColor: [\r\n          '#ff8b0b',\r\n          '#70b40e',\r\n          '#36A2EB',\r\n        ],\r\n      }],\r\n  };\r\n\r\n  const pie = {\r\n    labels: [\r\n      'ACCDIENTS',\r\n      'UTILISATEURS INSCRITS',\r\n      'AGENTS INSCRITS',\r\n      'DECES',\r\n    ],\r\n    datasets: [\r\n      {\r\n        data: [`${totalAccident}`, `${totalUsers}`, `${totalAgents}`, `${totalDeces}`],\r\n        backgroundColor: [\r\n          '#ff8b0b',\r\n          '#70b40e',\r\n          '#36A2EB',\r\n          '#fa0404',\r\n        ],\r\n        hoverBackgroundColor: [\r\n          '#ff8b0b',\r\n          '#70b40e',\r\n          '#36A2EB',\r\n          '#fa0404',\r\n        ],\r\n      }],\r\n  };\r\n  return (\r\n    <CContainer>\r\n      {\r\n        totalAccident === 0\r\n          ?\r\n          <CRow>\r\n            <CCol className=\"text-center \">\r\n              {/* <i style={{fontSize: 180, opacity: 0.5}} className=\"fa fa-bar-chart\"></i>\r\n              <h4 className=\" text-uppercase text-center\">\r\n                Statistiques non disponible\r\n              </h4>*/}\r\n              <div>\r\n                <CImg\r\n                  src={'avatars/datta-1.png'}\r\n                  className=\"img-fluid\"\r\n                />\r\n                <h4 className=\"text-uppercase text-center\">Données indisponibles  ...</h4>\r\n              </div>\r\n            </CCol>\r\n          </CRow>\r\n          :\r\n          <CCard>\r\n            <CCardHeader>\r\n              STATISTIQUES\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CChart type=\"pie\" datasets={pie.datasets} labels={pie.labels} />\r\n            </CCardBody>\r\n          </CCard>\r\n      }\r\n      {/* <CCard>\r\n        <CCardHeader>\r\n          Radar Stats\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CChartRadar\r\n            datasets={[\r\n              {\r\n                label: 'ACCIDENTS',\r\n                backgroundColor: 'rgba(179,181,198,0.2)',\r\n                borderColor: 'rgba(179,181,198,1)',\r\n                pointBackgroundColor: 'rgba(179,181,198,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgba(179,181,198,1)',\r\n                tooltipLabelColor: 'rgba(179,181,198,1)',\r\n                data: [`${totalAccident}`, 59, 90]\r\n              },\r\n              {\r\n                label: 'INTERVENTIONS',\r\n                backgroundColor: 'rgba(255,99,132,0.2)',\r\n                borderColor: 'rgba(255,99,132,1)',\r\n                pointBackgroundColor: 'rgba(255,99,132,1)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgba(255,99,132,1)',\r\n                tooltipLabelColor: 'rgba(255,99,132,1)',\r\n                data: [28, 48, 40]\r\n              }\r\n            ]}\r\n            options={{\r\n              aspectRatio: 1.5,\r\n              tooltips: {\r\n                enabled: true\r\n              }\r\n            }}\r\n            labels={[\r\n              'Region', 'Ville', 'Quartien'\r\n            ]}\r\n          />\r\n\r\n        </CCardBody>\r\n      </CCard>*/}\r\n    </CContainer>\r\n  );\r\n}\r\nexport default Statistiques\r\n\r\n"],"sourceRoot":""}