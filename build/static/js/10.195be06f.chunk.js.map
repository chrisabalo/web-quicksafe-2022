{"version":3,"sources":["views/agents/add-new-agents/AddAgents.js"],"names":["AddAgents","useState","nom","setNom","prenom","setPrenom","email","setEmail","code","setCode","status","setStatus","telephone","setTelephone","quartier","setQuartier","ville","setVille","registerAgent","useContext","AuthContext","re","useHistory","row","className","htmlFor","id","placeholder","name","value","onChange","e","target","toUpperCase","toLowerCase","custom","onClick","match","Swal","fire","length","setTimeout","handleRegisterAgent","size","color"],"mappings":"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","file":"static/js/10.195be06f.chunk.js","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody, CCardFooter,\r\n  CCardGroup, CCardHeader,\r\n  CCol, CContainer,\r\n  CForm, CFormGroup, CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText, CLabel,\r\n  CRow, CSelect\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport {API_BASE_URL} from \"../../../models\";\r\nimport {AuthContext} from \"../../../navigation/AuthProvider\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst AddAgents = () => {\r\n\r\n  const [nom, setNom] = useState('')\r\n  const [prenom, setPrenom] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [code, setCode] = useState('')\r\n  const [status, setStatus] = useState('')\r\n  const [telephone, setTelephone] = useState('')\r\n  const [quartier, setQuartier] = useState('')\r\n  const [ville, setVille] = useState('')\r\n\r\n  const {registerAgent} = useContext(AuthContext);\r\n  const history = useHistory();\r\n  let PASSWORD_REGEX_3=  /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,}$/;\r\n  let re = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n\r\n  const handleRegisterAgent = (nom, prenom, email, code, status, telephone, quartier, ville) => {\r\n    if ((!nom || !prenom || !email || !code || !status || !telephone || !quartier || !ville)) {\r\n      Swal.fire(\r\n        'CHAMPS VIDES',\r\n        `Tous les champs doivent etre renseigner s'il vous plait!`,\r\n        'warning'\r\n      )\r\n    } else if (!(email.match(re))) {\r\n\r\n      Swal.fire(\r\n        'ERREUR',\r\n        `L'email : <b>${email}</b> renseigné est invalide ...`,\r\n        'warning'\r\n      )\r\n    } else if ( status === null) {\r\n\r\n      Swal.fire(\r\n        'STATUS NON RENSEIGNER',\r\n        `Renseigner le status de l'agent s'il vous plait...`,\r\n        'warning'\r\n      )\r\n    } else if (11 > (telephone.length)) {\r\n      Swal.fire(\r\n        'NUMERO TROP COURT !!!',\r\n        `Votre numéro de telephone doit contenir au moins 8 chiffres sans compter le code indicatif, Le code inicatif du pays doit\" +\r\n        \" etre rentré comme l'exemple ci-après  Ex: (00228) !`,\r\n        'warning'\r\n      )\r\n    } else if ( registerAgent(nom, prenom, email, code, status, telephone, quartier, ville)) {\r\n      setTimeout(() => {\r\n        Swal.fire(\r\n          'NOUVEL AGENT',\r\n          `L'enregistrement du nouvel agent   \"<b>${email}</b>\" a été effectué...`,\r\n          'success'\r\n        )\r\n        setNom(\"\");\r\n        setPrenom(\"\");\r\n        setEmail(\"\");\r\n        setCode(\"\");\r\n        setStatus(\"\");\r\n        setTelephone(\"\");\r\n        setQuartier(\"\");\r\n        setVille(\"\");\r\n      }, 3000)\r\n\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n    <CRow>\r\n     <CCol>\r\n       <CCol>\r\n         <CCard>\r\n           <CCardHeader>\r\n             Ajouter un nouvel agent\r\n           </CCardHeader>\r\n\r\n           <CCardBody>\r\n               <CFormGroup  row className=\"my-0\">\r\n                 <CCol >\r\n                   <CFormGroup>\r\n                     <CLabel htmlFor=\"fname\">Nom</CLabel>\r\n                     <CInput\r\n                       id=\"name\"\r\n                       placeholder=\"Entrer le nom\"\r\n                       name=\"nom\"\r\n                       value={nom}\r\n                       onChange={e => setNom(e.target.value.toUpperCase())} />\r\n                   </CFormGroup>\r\n                 </CCol>\r\n                 <CCol>\r\n                   <CFormGroup>\r\n                     <CLabel htmlFor=\"lname\">Prenom</CLabel>\r\n                     <CInput\r\n                       id=\"firstname\"\r\n                       placeholder=\" Tapez le nom de famille\"\r\n                       name=\"prenom\"\r\n                       value={prenom}\r\n                       onChange={e => setPrenom(e.target.value.toLowerCase())}\r\n                     />\r\n                   </CFormGroup>\r\n                 </CCol>\r\n                 <CCol>\r\n                   <CFormGroup>\r\n                     <CLabel htmlFor=\"email\">Email</CLabel>\r\n                     <CInput\r\n                       id=\"email\"\r\n                       placeholder=\"Entrer l'email\"\r\n                       name=\"email\"\r\n                       value={email}\r\n                       onChange={e => setEmail(e.target.value.toLowerCase())}\r\n                     />\r\n                   </CFormGroup>\r\n                 </CCol>\r\n               </CFormGroup>\r\n               <CFormGroup row className=\"my-0\">\r\n                 <CCol >\r\n                   <CFormGroup>\r\n                     <CLabel htmlFor=\"code\">Code de l'agent</CLabel>\r\n                     <CInput\r\n                       id=\"code\"\r\n                       placeholder=\"Entrer le code de l'agent\"\r\n                       name=\"code\"\r\n                       value={code}\r\n                       onChange={e => setCode(e.target.value.toUpperCase())}\r\n                     />\r\n                   </CFormGroup>\r\n                 </CCol>\r\n                 <CCol>\r\n                   <CFormGroup>\r\n                     <CLabel htmlFor=\"telephone\">Telephone</CLabel>\r\n                     <CInput\r\n                       id=\"telephone\"\r\n                       placeholder=\" Entrer le numero de telephone Ex: (00228)XXXXxxxx\"\r\n                       name=\"telephone\"\r\n                       value={telephone}\r\n                       onChange={e => setTelephone(e.target.value)}\r\n                     />\r\n                   </CFormGroup>\r\n                 </CCol>\r\n                 <CCol>\r\n                   <CFormGroup>\r\n                     <CLabel htmlFor=\"code\">Status de l'agent</CLabel>\r\n                     <CSelect\r\n                       onChange={e => setStatus(e.target.value)}\r\n                       value={status} custom name=\"status\" id=\"status\">\r\n                       <option value={''}>Choisir le status...</option>\r\n                       <option value=\"disponible\"> Disponible</option>\r\n                       <option value=\"occupee\"> Occupée</option>\r\n                     </CSelect>\r\n                   </CFormGroup>\r\n                 </CCol>\r\n               </CFormGroup>\r\n               <CFormGroup row className=\"my-0\">\r\n                 <CCol >\r\n                   <CFormGroup>\r\n                     <CLabel htmlFor=\"quartier\">Quartier</CLabel>\r\n                     <CInput\r\n                       id=\"quartier\"\r\n                       placeholder=\"Entrer le quartier\"\r\n                       name=\"quartier\"\r\n                       value={quartier}\r\n                       onChange={e => setQuartier(e.target.value.toUpperCase())}\r\n                     />\r\n                   </CFormGroup>\r\n                 </CCol>\r\n                 <CCol >\r\n                   <CFormGroup>\r\n                     <CLabel htmlFor=\"ville\">Ville</CLabel>\r\n                     <CInput\r\n                       id=\"ville\"\r\n                       placeholder=\"Entrer la ville\"\r\n                       name=\"ville\"\r\n                       value={ville}\r\n                       onChange={e => setVille(e.target.value.toUpperCase())}\r\n                     />\r\n                   </CFormGroup>\r\n                 </CCol>\r\n               </CFormGroup>\r\n               <CButton onClick={() => handleRegisterAgent(nom, prenom, email, code, status, telephone, quartier, ville)} size=\"md\" color=\"info\" className=\"ml-1 float-left text-uppercase\">\r\n                 Ajouter\r\n               </CButton>\r\n           </CCardBody>\r\n         </CCard>\r\n       </CCol>\r\n     </CCol>\r\n     </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport  default AddAgents\r\n"],"sourceRoot":""}